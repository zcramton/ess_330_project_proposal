{
  "hash": "814db53f6cedfed69daf191615e3b516",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Final Project Abstract - Lab 7\nauthors:\n  - name: Bella Conrad\n    affiliation: Colorado State University\n    roles: \n      - writing\n    corresponding: false\n  - name: Zachary Cramton\n    affiliation: Colorado State University\n    roles: \n      - writing\n    corresponding: true\n  - name: Rachel Delorie\n    affiliation: Colorado State University\n    roles: \n      - writing\n    corresponding: false\n    \nbibliography: references.bib\ncsl: \"./apa.csl\"\n  \noutput:\n  html_document:\n    output-dir: docs\n    github_pages: true\n    \nexecute: \n  echo: true\n---\n\n\n\n\n\n# Urbanization, Density and Access to Public Parks in the United States\n\n## Abstract\n\n### Introduction\n\n<p> Since 2008, the majority of the world's population has lived in urban areas, a result of urbanization in developing countries [@kohlhase2013new; @beall2010urbanization]. The United States developed earlier than many nations, with more than 50 percent of the population living in urban areas. \n\n:::{.callout-note}\n### Definition of Urban Areas in Census History\nPrior to the 2020 Census urban areas were defined as any area with greater than 2500 people. Following the 2010 census urban clusters described areas with populations greater than 2,500 and less than 50,000; urbanized areas described areas with a population greater than 50,000. For the 2020 Census the threshold was changed to 5000 people [@ratcliffe_redefining_2022].\n:::\n\n<p> by the 14th Census in 1920. In the century since the 1920 census the percentage of individuals living in urban areas has increased to 80.7% [@slack2020changing]. As more people moved to urban areas, those areas expanded forming urbanized areas and large cities.\n<p>  Urban planning has existed for centuries out of necessity, historically dominated by efficiency and utilitarianism, optimizing the world we live in for profitability, corporate productivity, and automobile-based mobility. This optimization came with sacrifices, which now impact an increasingly large majority of the population. In recent years, the discipline has begun to prioritize human factors over utilitarian efficiency. Thousands of years of living in rural settings makes urban living hard for most people's biology. Connection to nature and time outdoors even in small amounts has been shown to be a vital part maintaining physical and mental health [DOTHIS:: Find additional source]. In an effort to make urban spaces more livable, planners are turning to parks and natural areas to connect people to nature.\n<p>  Equity issues aside, overturning and correcting more than a century of bad planning is a daunting task. Many cities filled in and built up over the course of the 20th century as land became a premium commodity [DOTHIS:: Find additional source]. Does this density present significant challenges for today's planning professionals? This research seeks to investigate the relationship between urban demographics like density and park access. In exploring this relationship, we hypothesize that there is an intermediate/sublinear relationship between urban population density and public open space availability.\n\n### Data Overview\n\n<p> This report uses data from the UN-Habitat Urban Indicators Database and the ParkServe® Database maintained by the Trust for Public Land. The UN data relates to the UN-SDG 11.7.1 pertaining to access to open spaces and green areas. \n<p> The January 2025 version of the UN Open Spaces and Green Areas data includes the average share of urban areas allocated to streets and open public spaces as well as the share of the urban population with convenient access to an open public space. \n\n::: {.callout-note}\n### UN Definition\nIn this case, the UN defines \"convenient access to an open public space\" as the \"urban population withing 400 meters walking distance along the street network to an open public space\" [@may2000habitat].\n:::\n\n<p> These data collected by the UN were collected in 2020 and provided as a .xls format spreadsheet. These data were converted to .csv format with Microsoft Excel. The ParkServe® data selected for use is the 2020 data set to match the year the UN data was recorded. Specifically, this report uses elements of the City Park Facts: Acreage & Park System Highlights. The ParkServe® data is much less synthesized and was available as a .xml file. The file was structured for viewing as a spreadsheet rather than for further analysis and included multiple worksheets withing the workbook. In converting the file to a .csv file, the data spread across multiple worksheets was collated in a single worksheet and converted to a summarized dataset .csv file.\n<p> These data are lacking a shared numerical position data type but share a city name column formatted as \"city_name, two_letter_state_abbreviation\". There is not perfect overlap between cities with data in each database however, there are 25 cities shared between the datasets. Cities present in only one data set will be culled when the data is joined.\n\n### Methods\n1.\tClean the data. The raw data were downloaded as Excel spreadsheets, some reformatting in Excel was required to effectively exporting as a .csv file and importing the new summarized file to RStudio. Remaining data cleaning will occur in R as needed including any header changes or additional columns needed.\n2.\tConduct Exploratory Data Analysis (EDA). \n3.\tJoin datasets by “city name” to have a complete working dataset. These data will be combined into a single data frame with an inner join because there is a large number of cities listed in one data set but not the other. The new dataset will include only cities found in both datasets, with columns from both.\n\n::: {.callout-note}\n## Limiting Scope\nThe cities found in only one dataset will be cut from the data to accommodate the limited scope of the project. With a bigger scope it is possible that additional data could be used to understand these patterns with more depth.\n:::\n\n4.\tPrep data and split it into training and testing datasets. Perform a 10-fold cross-validation on training data. \n5.\tCreate a recipe.\n6.\tSet up several models in regression mode. \n7.\tCreate a workflow set including the previously written models and the recipe. \n8.\tMap function over workflow using workflow map.\n9.\tUsing the highest performing model, fit the data and augment. \n10.\tPlot and graph data to visually display test results.\n11. Explore using the model to predict values for cities included in only one document (if time allows).\n\n## Exploratory Data Analysis (EDA)\n<p> The data has already been discussed in general terms in the data overview section. There will be a readme file created to elaborate on the sources, formatting and manipulation required for each dataset before joining them into the urban_parks_data data frame. In general terms, prior to importing into RStudio, the .xml files the data came in were opened in MS Excel; the sheets were formatted to be converted to .csv files including condensing multiple worksheets of the ParkServe® data into a sinigle sheet for easier conversion to a .csv file. While some of the cleaning done in Excel could have been completed in RStudio, it was not efficient to do so. Using Excel was faster and more flexible for that use case. Similar reformatting was required with the UN data as the headers were unreasonably long by default. The readme that will be created for each (or both) files will include a more detailed summary of what each variable means.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'here' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nhere() starts at C:/Users/Zacha/github/CSU/ESS 330/ess_330_project_proposal\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(flextable)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(patchwork)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'patchwork' was built under R version 4.4.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Create some visualizations and descriptions of what data you have, where you got it, and how and if you need to clean and manipulate it for your project\n\n# Import data from csvs and clean NAs\nparkserve_data <- read_csv(here(\"data\", \"clean_data/parkserve_summarized_facts_2020.csv\")) %>% \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 100 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): city_name, city_pop, land_area, revised_area, percent_designed_par...\ndbl  (5): parkland_area, designed_park_area, natural_park_area, parkland_per...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nun_land_use_data <- read_csv(here(\"data\", \"clean_data/un_land_use.csv\")) %>% \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 59 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): city_name\ndbl (2): mean_percent_built_open_space, mean_percent_open_space_access\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Add columns and finish cleaning parkserve data\nclean_parkserve_data <- parkserve_data %>%\n  mutate(\n    across(-city_name, ~ as.numeric(.x)),  # Convert all columns to numeric except for city name\n    parkland_percent = parkland_percent * 100, # Convert parkland percent from ratio\n    # Fix design/natural park area percentage calculations\n    percent_designed_parks = ifelse(parkland_area == 0, NA, (designed_park_area / parkland_area) * 100),\n    percent_natural_parks = ifelse(parkland_area == 0, NA, (natural_park_area / parkland_area) * 100),\n    #New calculation for designed-natural area ratio\n    dn_area_ratio = ifelse(percent_natural_parks == 0, NA, percent_designed_parks / percent_natural_parks)\n  )\n\n  \n  \n# Join data removing cities found in only one of the two datasets\nurban_parks_data <- clean_parkserve_data %>% \n  inner_join(un_land_use_data, by = \"city_name\")  \n\n# Basic data structure exploration\nglimpse(urban_parks_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 25\nColumns: 18\n$ city_name                      <chr> \"Anchorage, AK\", \"Atlanta, GA\", \"Boston…\n$ city_pop                       <dbl> 299100, 498059, 687725, 2744859, 377963…\n$ land_area                      <dbl> 1090997, 85217, 30897, 145686, 49726, 2…\n$ revised_area                   <dbl> 1086019, 84250, 29175, 136796, 46880, 2…\n$ parkland_area                  <dbl> 914138, 5293, 5072, 13609, 3170, 20352,…\n$ designed_park_area             <dbl> 2417, 3864, 2556, 8593, 1792, 10974, 40…\n$ natural_park_area              <dbl> 911721, 1429, 2516, 4430, 1378, 9378, 1…\n$ parkland_percent               <dbl> 84.173297, 6.282493, 17.384747, 9.94839…\n$ percent_designed_parks         <dbl> 0.2644021, 73.0020782, 50.3943218, 63.1…\n$ percent_natural_parks          <dbl> 99.735598, 26.997922, 49.605678, 32.551…\n$ pop_density                    <dbl> 0.28, 5.91, 23.57, 20.07, 8.06, 6.39, 7…\n$ parkland_per_1k_pop            <dbl> 3056.295553, 10.627255, 7.375041, 4.744…\n$ park_units                     <dbl> 228, 416, 373, 645, 179, 397, 302, 70, …\n$ park_units_per_10k_pop         <dbl> 7.622869, 8.352424, 5.423680, 2.349847,…\n$ percent_half_mile_walk         <dbl> 0.75091, 0.72447, 0.99790, 0.98220, 0.8…\n$ dn_area_ratio                  <dbl> 0.00265103, 2.70398880, 1.01589825, 1.9…\n$ mean_percent_built_open_space  <dbl> 22.0, 13.8, 19.8, 17.2, 20.0, 20.4, 20.…\n$ mean_percent_open_space_access <dbl> 71.9, 21.2, 68.2, 47.8, 29.8, 41.9, 43.…\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Descriptive Stats\n\n  # Write function to round numeric columns to two decimal places\n  round_numeric <- function(df) {\n    df %>% \n      mutate(across(where(is.numeric), ~round(.x, 2)))\n  }\n\n  # Summarize stats by variable\n    desc_stats_parks <- urban_parks_data %>% \n      select(where(is.numeric)) %>% \n      pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"value\") %>% \n      group_by(variable) %>% \n      summarize(mean = mean(value, na.rm = TRUE), \n                median = median(value, na.rm = TRUE), \n                sd = sd(value, na.rm = TRUE),\n                Q1 = quantile(value, 0.25, na.rm = TRUE),\n                Q3 = quantile(value, 0.75, na.rm = TRUE)) %>% \n      round_numeric()\n      \n      # Print descriptive stats with flextable\n      desc_stats_flex <- flextable(desc_stats_parks) %>%\n        set_caption(\"Summarized Urban Parks Statistics\") %>% \n        set_header_labels(\n          variable = \"Variable\",\n          mean = \"Mean\",\n          median = \"Median\",\n          sd = \"Standard Deviation\",\n          Q1 = \"1st Quartile (Q1)\",\n          Q3 = \"3rd Quartile (Q3)\") %>% \n        autofit()\n\n# Find Top/Bottom cities for percent parkland\n  \n  # Select relevant columns\n    simplified_vars <- c(\"city_name\", \"city_pop\", \"revised_area\", \"pop_density\", \"parkland_area\", \"dn_area_ratio\", \"parkland_percent\", \"parkland_per_1k_pop\", \"percent_half_mile_walk\")\n  \n  # Filter top/bottom 10 cities\n  top10_park_percent <- urban_parks_data %>% \n    arrange(desc(parkland_percent)) %>% \n    slice_head(n = 10) %>% \n    select(all_of(simplified_vars)) %>% \n    round_numeric()\n  \n  bottom10_park_percent <- urban_parks_data %>% \n    arrange(parkland_percent) %>% \n    slice_head(n = 10) %>% \n    select(all_of(simplified_vars)) %>% \n    round_numeric()\n  \n  # Create top/bottom 10 flextables w/ function\n  # Create function\n  make_best_worst_flextbl <-function(df, caption) {\n    flextable(df) %>% \n    set_caption(caption) %>%\n    set_header_labels(\n      city_name = \"City Name\",\n      city_pop = \"City Population\",\n      revised_area = \"City Land Area (Revised) (Acres)\",\n      pop_density = \"Population Density (People/Acre)\",\n      parkland_area = \"City Parkland Area (Acres)\",\n      parkland_percent = \"Percent Parkland\",\n      parkland_per_1k_pop = \"Parkland Per (1000) Capita\",\n      percent_half_mile_walk = \"Percent of Residents within 0.5 Miles of a Park\",\n      dn_area_ratio = \"Designed-Natural Park Area Ratio (Designed Park (%) / Natural Park (%)\") %>% \n    autofit()\n  }\n  \n  top10_park_percent_flex <- make_best_worst_flextbl(top10_park_percent, \"Top 10 Cities for Parkland Percentage\")\n  \n  bottom10_park_percent_flex <- make_best_worst_flextbl(bottom10_park_percent, \"Top 10 Cities for Parkland Percentage\")\n  \n# Make plots to visualize the data\n# Histogram: Land Area\nland_area_plot <- ggplot(urban_parks_data, aes(x = as.numeric(land_area))) +\n  geom_histogram(bins = 20, fill = \"steelblue\", color = \"white\") +\n  labs(x = \"Land Area (Acres)\", y = \"Frequency\", title = \"Distribution of City Land Areas\") +\n  theme_minimal()\n\n# Scatterplot: Land Area vs Parkland Area\nland_vs_park_area_plot <- ggplot(urban_parks_data, aes(x = as.numeric(land_area), y = parkland_area)) +\n  geom_point(color = \"forestgreen\") +\n  labs(x = \"Land Area (Acres)\", y = \"Parkland Area\\n(Acres)\", title = \"Land Area vs Parkland Area\") +\n  scale_x_continuous(labels = scales::label_comma()) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme_minimal()\n\n# Scatterplot: Population Density vs Parkland Percent\ndensity_vs_park_percent_plot <- ggplot(urban_parks_data, aes(x = as.numeric(pop_density), y = parkland_percent)) +\n  geom_point(color = \"darkorange\") +\n  labs(x = \"Population Density (People/Acre)\", y = \"Percent Parkland\", title = \"Population Density vs\\nParkland Percent\") +\n  scale_x_continuous(labels = scales::label_comma()) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme_minimal()\n\n# Scatterplot: Designed-Natural Park Area Ratio vs Parkland Percent\ndn_area_ratio_vs_park_percent_plot <- ggplot(urban_parks_data, aes(x = dn_area_ratio, y = parkland_percent)) +\n  geom_point(color = \"mediumvioletred\") +\n  labs(x = \"Designed-Natural Park Area Ratio\", y = \"Percent Parkland\", title = \"Designed-Natural Park Area\\nRatio vs Parkland Percent\") +\n  scale_x_continuous(labels = scales::label_comma()) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme_minimal()\n\n# Scatterplot: Percent Designed Parks vs Percent Natural Parks\ndesigned_vs_natural_parks_plot <- ggplot(urban_parks_data, aes(x = percent_designed_parks, y = percent_natural_parks)) +\n  geom_point(color = \"cadetblue\") +\n  labs(x = \"Percent Designed Parks\", y = \"Percent Natural\\nParks\", title = \"Percent Designed vs Natural Parks\") +\n  theme_minimal()\n\n# Scatterplot: Percent Open Space Access vs Percent Built Open Space\nopen_space_access_vs_built_plot <- ggplot(urban_parks_data, aes(x = mean_percent_open_space_access, y = mean_percent_built_open_space)) +\n  geom_point(color = \"seagreen\") +\n  labs(x = \"Mean % Open Space Access\", y = \"Mean % Built\\nOpen Space\", title = \"Accessibility of Built Open Space\") +\n  theme_minimal()\n\n# Combine all plots in one figure using patchwork (optional)\nall_eda_plots <- (land_area_plot | land_vs_park_area_plot) / \n  (density_vs_park_percent_plot | dn_area_ratio_vs_park_percent_plot) / \n  (designed_vs_natural_parks_plot| open_space_access_vs_built_plot) +\n  plot_layout(guides = \"collect\")\n\n# Display data summary and visualization\n\n  # Display flextables\n  desc_stats_flex\n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Basic EDA-1.png)\n:::\n\n```{.r .cell-code .hidden}\n  top10_park_percent_flex\n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Basic EDA-2.png)\n:::\n\n```{.r .cell-code .hidden}\n  bottom10_park_percent_flex \n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Basic EDA-3.png)\n:::\n\n```{.r .cell-code .hidden}\n  # Display patchwork plots\n  all_eda_plots\n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Basic EDA-7.png)\n:::\n:::\n\n\n\n\n\n## References\n",
    "supporting": [
      "index_files\\figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}